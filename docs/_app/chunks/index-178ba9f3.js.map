{"version":3,"file":"index-178ba9f3.js","sources":["../../../../../src/lib/templates/Basic/Profile.svelte","../../../../runtime/app/stores.js","../../../../../src/lib/utils/index.js","../../../../../src/lib/templates/Contacts/ContactCard.svelte","../../../../../src/lib/templates/Hypns/PiperNet.svelte","../../../../../src/lib/templates/Contacts/GetTags.svelte","../../../../../src/lib/TagAccess.svelte","../../../../../src/lib/templates/ShareTagWith.svelte","../../../../../src/lib/components/ShowRoot.svelte","../../../../../src/lib/stores.js","../../../../../src/lib/Common.svelte","../../../../../src/lib/DAGJose.svelte","../../../../../src/lib/QRCode.svelte","../../../../../src/lib/HypnsManager.svelte","../../../../../src/lib/TagValue.svelte","../../../../../src/lib/templates/Contacts/Contacts.svelte","../../../../../src/lib/components/index.js","../../../../../src/lib/App.svelte","../../../../../src/routes/index.svelte"],"sourcesContent":["<script>\r\n\t// Basic template to show how to interact with the proxcryptor Parent component\r\n\timport { createEventDispatcher } from 'svelte';\r\n\r\n\timport { slide } from 'svelte/transition';\r\n\timport { quintOut } from 'svelte/easing';\r\n\r\n\t// Component props passed in from Parent Component\r\n\t// will also reactively update if updated in parent\r\n\texport let decryptedData;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tconst tag = 'Profile';\r\n\tlet schema;\r\n\tlet value;\r\n</script>\r\n\r\n<div transition:slide={{ delay: 100, duration: 400, easing: quintOut }}>\r\n\t<h3>{tag}</h3>\r\n\t<slot>\r\n\t\t<textarea bind:value />\r\n\t</slot>\r\n\r\n\t<div class=\"submit\">\r\n\t\t<button\r\n\t\t\ton:click|preventDefault={() => dispatch('handleSubmit', { tag, data: { value, schema } })}\r\n\t\t\t>Post</button\r\n\t\t>\r\n\t</div>\r\n</div>\r\n\r\n{#if decryptedData}\r\n\t{@html JSON.stringify(decryptedData, null, 2)}\r\n{/if}\r\n","import { getContext } from 'svelte';\nimport { browser } from './env.js';\nimport '../env.js';\n\n// TODO remove this (for 1.0? after 1.0?)\nlet warned = false;\nfunction stores() {\n\tif (!warned) {\n\t\tconsole.error('stores() is deprecated; use getStores() instead');\n\t\twarned = true;\n\t}\n\treturn getStores();\n}\n\n/**\n * @type {import('$app/stores').getStores}\n */\nconst getStores = () => {\n\tconst stores = getContext('__svelte__');\n\n\treturn {\n\t\tpage: {\n\t\t\tsubscribe: stores.page.subscribe\n\t\t},\n\t\tnavigating: {\n\t\t\tsubscribe: stores.navigating.subscribe\n\t\t},\n\t\t// TODO remove this (for 1.0? after 1.0?)\n\t\t// @ts-expect-error - deprecated, not part of type definitions, but still callable\n\t\tget preloading() {\n\t\t\tconsole.error('stores.preloading is deprecated; use stores.navigating instead');\n\t\t\treturn {\n\t\t\t\tsubscribe: stores.navigating.subscribe\n\t\t\t};\n\t\t},\n\t\tsession: stores.session,\n\t\tupdated: stores.updated\n\t};\n};\n\n/** @type {typeof import('$app/stores').page} */\nconst page = {\n\t/** @param {(value: any) => void} fn */\n\tsubscribe(fn) {\n\t\tconst store = getStores().page;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/** @type {typeof import('$app/stores').navigating} */\nconst navigating = {\n\tsubscribe(fn) {\n\t\tconst store = getStores().navigating;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/** @param {string} verb */\nconst throw_error = (verb) => {\n\tthrow new Error(\n\t\tbrowser\n\t\t\t? `Cannot ${verb} session store before subscribing`\n\t\t\t: `Can only ${verb} session store in browser`\n\t);\n};\n\n/** @type {typeof import('$app/stores').session} */\nconst session = {\n\tsubscribe(fn) {\n\t\tconst store = getStores().session;\n\n\t\tif (browser) {\n\t\t\tsession.set = store.set;\n\t\t\tsession.update = store.update;\n\t\t}\n\n\t\treturn store.subscribe(fn);\n\t},\n\tset: () => throw_error('set'),\n\tupdate: () => throw_error('update')\n};\n\n/** @type {typeof import('$app/stores').updated} */\nconst updated = {\n\tsubscribe(fn) {\n\t\tconst store = getStores().updated;\n\n\t\tif (browser) {\n\t\t\tupdated.check = store.check;\n\t\t}\n\n\t\treturn store.subscribe(fn);\n\t},\n\tcheck: () => throw_error('check')\n};\n\nexport { getStores, navigating, page, session, stores, updated };\n","import b64 from 'base64-js';\r\nimport bs58 from 'bs58';\r\n\r\nconst ROOT_CID = '__ROOT_CID';\r\nconst PUBLIC_KEY_BYTES = 32;\r\n\r\n// Pre-Init\r\nconst LUT_HEX_4b = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\r\nconst LUT_HEX_8b = new Array(0x100);\r\nfor (let n = 0; n < 0x100; n++) {\r\n\tLUT_HEX_8b[n] = `${LUT_HEX_4b[(n >>> 4) & 0xf]}${LUT_HEX_4b[n & 0xf]}`;\r\n}\r\n// End Pre-Init\r\nexport function bufftoHex(buffer) {\r\n\tlet out = '';\r\n\tfor (let idx = 0, edx = buffer.length; idx < edx; idx++) {\r\n\t\tout += LUT_HEX_8b[buffer[idx]];\r\n\t}\r\n\treturn out;\r\n}\r\n\r\nexport function validatePubKey(pubKey) {\r\n\tif (!pubKey) return;\r\n\r\n\t// base64 / base64URL\r\n\tlet pubKeyBytes = b64.toByteArray(pubKey);\r\n\r\n\tif (pubKeyBytes.length === PUBLIC_KEY_BYTES) {\r\n\t\treturn pubKeyBytes;\r\n\t}\r\n\r\n\t// base58 / base58BTC\r\n\ttry {\r\n\t\tlet b58Bytes = bs58.decode(pubKey);\r\n\t\tif (b58Bytes.length === PUBLIC_KEY_BYTES) {\r\n\t\t\treturn b58Bytes;\r\n\t\t}\r\n\t} catch (error) {}\r\n\r\n\t// hex\r\n\tconst fromHexString = (hexString) =>\r\n\t\tnew Uint8Array(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)));\r\n\tlet hexb58Bytes = fromHexString(pubKey);\r\n\r\n\tif (hexb58Bytes.length === PUBLIC_KEY_BYTES) {\r\n\t\treturn hexb58Bytes;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\nexport async function hexDigestMessage(message) {\r\n\tconst msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n\tconst hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8); // hash the message\r\n\tconst hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n\tconst hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\r\n\treturn hashHex;\r\n}\r\n","<article class=\"contact-card\">\r\n\t<h2>\r\n\t\t<slot name=\"handle\">\r\n\t\t\t<span class=\"missing\">Unknown handle</span>\r\n\t\t</slot>\r\n\t</h2>\r\n\r\n\t<div class=\"address\">\r\n\t\t<slot name=\"publicKey\">\r\n\t\t\t<span class=\"missing\">Unknown publicKey</span>\r\n\t\t</slot>\r\n\t</div>\r\n\r\n\t<div class=\"email\">\r\n\t\t<slot name=\"latest\">\r\n\t\t\t<span class=\"missing\">Unknown latest value</span>\r\n\t\t</slot>\r\n\t</div>\r\n</article>\r\n\r\n<style>\r\n\t.contact-card {\r\n\t\tmin-width: 300px;\r\n\t\tborder: 1px solid #aaa;\r\n\t\tborder-radius: 2px;\r\n\t\tbox-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\r\n\t\tpadding: 1em;\r\n\t\tbackground: lemonchiffon;\r\n\t\tborder-radius: 3px;\r\n\t}\r\n\r\n\th2 {\r\n\t\tfont-weight: 600;\r\n\t\tpadding: 0 0 0.2em 0;\r\n\t\tmargin: 0 0 1em 0;\r\n\t\tborder-bottom: 1px solid #008000;\r\n\t}\r\n\r\n\t.address,\r\n\t.email {\r\n\t\tpadding: 0 0 0 1.5em;\r\n\t\tbackground: 0 0 no-repeat;\r\n\t\tbackground-size: 20px 20px;\r\n\t\tmargin: 0 0 0.5em 0;\r\n\t\tline-height: 1.2;\r\n\t}\r\n\r\n\t/* .address {\r\n\t\tbackground-image: url(/tutorial/icons/map-marker.svg);\r\n\t}\r\n\t.email {\r\n\t\tbackground-image: url(/tutorial/icons/email.svg);\r\n\t} */\r\n\t.missing {\r\n\t\tcolor: #999;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// open a Hypns instance for this public key and show the latest\r\n\r\n\timport { bufftoHex } from '../../utils/index';\r\n\r\n\texport let pubKey;\r\n\texport let hypnsNode;\r\n\r\n\tlet latestHypns;\r\n\r\n\tlet hypnsInstance;\r\n\tlet instanceReady;\r\n\r\n\t$: if (!!pubKey && hypnsNode) handleOpen(pubKey);\r\n\r\n\tasync function handleOpen(pubKey) {\r\n\t\tlet publicKeyHex = bufftoHex(pubKey);\r\n\t\t// take the wallet and pass it into hypns\r\n\t\thypnsInstance = await hypnsNode.open({ keypair: { publicKey: publicKeyHex } });\r\n\r\n\t\t// should update you whenever the other guy publishes an updated value\r\n\t\thypnsInstance.on('update', (val) => {\r\n\t\t\tlatestHypns = val.ipld;\r\n\t\t});\r\n\r\n\t\tinstanceReady = await hypnsInstance.ready();\r\n\t}\r\n</script>\r\n\r\n{#if !hypnsInstance}\r\n\tLoading hypnsInstance...\r\n{:else if instanceReady}\r\n\t{#await instanceReady}\r\n\t\tGetting instance ready...\r\n\t{:then}\r\n\t\t<h3>✔️ Connected to PiperNet</h3>\r\n\t\t{#if latestHypns}\r\n\t\t\t✔️ Lastest Saved Root: {latestHypns}\r\n\t\t\t<slot {latestHypns} />\r\n\t\t{:else}\r\n\t\t\t⚠️ No latest value available.\r\n\t\t{/if}\r\n\t{/await}\r\n{:else}\r\n\tSign message to write to PiperNet...\r\n{/if}\r\n","<script>\r\n\texport let rootCID;\r\n\texport let getTagNodes;\r\n\r\n\tlet tagNodes;\r\n\r\n\t$: rootCID && processRootCID();\r\n\r\n\tasync function processRootCID() {\r\n\t\ttagNodes = await getTagNodes(rootCID);\r\n\t}\r\n</script>\r\n\r\n{#if tagNodes}\r\n\t{#await tagNodes}\r\n\t\tLoading tags\r\n\t{:then tagNodes}\r\n\t\t{#each tagNodes as tagNode}\r\n\t\t\t<slot {tagNode} />\r\n\t\t{/each}\r\n\t{/await}\r\n{/if}\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\texport let tag;\r\n\texport let pubKey;\r\n\texport let checkAccess;\r\n\r\n\tlet accessCode;\r\n\tlet checked;\r\n\r\n\t$: if (!!tag && !!pubKey) doCheck();\r\n\r\n\tasync function doCheck() {\r\n\t\tconsole.log(`Checking access to ${tag} for `, { pubKey });\r\n\t\taccessCode = await checkAccess(tag, pubKey);\r\n\t\tchecked = true;\r\n\t}\r\n\r\n\tonMount(async () => {});\r\n</script>\r\n\r\n<div>\r\n\t{#if checked && accessCode}\r\n\t\t✔️ You have has access to their {tag}\r\n\t{:else}\r\n\t\t✖️ You have no access to {tag}\r\n\t{/if}\r\n</div>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t//pass in props about what is being shared\r\n\texport let tag;\r\n\texport let setAccess;\r\n\texport let contacts;\r\n\r\n\t// export let contacts = []; // a @handle: pubkey mapping\r\n\r\n\tlet target;\r\n\tlet value;\r\n\tlet promiseToAllow;\r\n\tlet shared;\r\n\r\n\t$: if (value && contacts && contacts.length) {\r\n\t\tconsole.log({ contacts });\r\n\t\tlet match = contacts?.find((contact) => contact.handle === value);\r\n\t\ttarget = match || null;\r\n\t}\r\n\tfunction handleGrantAccess(_event) {\r\n\t\t// take value and add to this tag's reKey list\r\n\t\tpromiseToAllow = setAccess(tag, target.pubKey);\r\n\t}\r\n</script>\r\n\r\n<div>\r\n\tShare {tag} With: <input bind:value placeholder=\"Enter Handle or Public Key\" />\r\n\t<div>\r\n\t\t{#if target}\r\n\t\t\t✔️ Matched {target.handle} <button on:click={handleGrantAccess}>Grant Access</button>\r\n\t\t{:else if value}\r\n\t\t\t✖️ No matches for {value}\r\n\t\t{/if}\r\n\t</div>\r\n\r\n\t{#if promiseToAllow}\r\n\t\t{#await promiseToAllow}\r\n\t\t\tGranting access...\r\n\t\t{:then _}\r\n\t\t\tAccess Granted to {value}\r\n\t\t{/await}\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n</style>\r\n","<script>\r\n\texport let rootCID;\r\n</script>\r\n\r\n{#if rootCID}\r\n\t✔️ IPLD Data Saved to: <a href=\"https://dweb.link/api/v0/dag/get?arg={rootCID}\" target=\"_blank\">\r\n\t\t{rootCID}</a\r\n\t>\r\n\t<br />\r\n{/if}\r\n","import { writable } from 'svelte/store';\r\n\r\nexport const rootCID = writable(null);\r\nexport const ipfsNode = writable(null);\r\nexport const CID = writable(null);\r\n\r\nexport const contacts = writable([]);\r\n","<script>\r\n\timport ShareTagWith from '$lib/templates/ShareTagWith.svelte';\r\n\timport { contacts } from '$lib/stores';\r\n\r\n\texport let getTagNode;\r\n\texport let decrypt;\r\n\texport let tag;\r\n\texport let rootCID;\r\n\texport let setAccess;\r\n\r\n\tlet tagNode;\r\n\tlet decryptedData = [];\r\n\tlet currentRoodCID;\r\n\tlet ready;\r\n\r\n\t// refresh on changes in tag or rootCID\r\n\t$: if (tag || (rootCID && currentRoodCID !== rootCID)) refreshedRootCID(); // trigger refresh whenever rootCID changes\r\n\r\n\texport async function refreshedRootCID() {\r\n\t\tready = false;\r\n\t\tconsole.log('Common refreshedRootCID for ', tag);\r\n\t\tcurrentRoodCID = rootCID;\r\n\t\ttagNode = await getTagNode(tag);\r\n\t\tif (!!tagNode) decryptedData = await decrypt(tagNode);\r\n\t\tconsole.log({ decryptedData });\r\n\t\tready = true;\r\n\t}\r\n</script>\r\n\r\n{#if ready && tagNode && decryptedData}\r\n\t{#await decryptedData}\r\n\t\tDecrypting...\r\n\t{:then decryptedData}\r\n\t\t<!-- TODO: if no contacts, redirect to Contacts component so they can be decrypted  -->\r\n\t\t<ShareTagWith {tag} {setAccess} contacts={$contacts} />\r\n\r\n\t\t<slot {decryptedData} />\r\n\t{/await}\r\n{:else}\r\n\t<!-- No existing {tag} data yet: just show data entry portion, no data display (there's nothing to display yet) -->\r\n\t<slot decryptedData={null} />\r\n{/if}\r\n","<script lang=\"ts\">\r\n\t/*\r\n\tAll this component does is connect IPLD + proxcryptor + Saving Component Template so they can work together\r\n\t*/\r\n\timport { onMount, setContext } from 'svelte';\r\n\timport Basic from './templates/Basic/Profile.svelte';\r\n\timport Contacts from './templates/Contacts/_Contacts.svelte';\r\n\r\n\timport ShowRoot from './components/ShowRoot.svelte';\r\n\timport Common from './Common.svelte';\r\n\r\n\texport let rootCID;\r\n\texport let proxcryptor; // pass in a proxy re-encryptor prop\r\n\texport let ipfsNode; // pass in an instance of ipfs\r\n\texport let CID; // pass in https://github.com/multiformats/js-multiformats#interfaces\r\n\texport let tag;\r\n\r\n\tconst ROOT_CID = '__ROOT_CID__'; // Database key\r\n\r\n\tlet loaded = false;\r\n\r\n\t// functions\r\n\tlet handleRootCIDUpdate;\r\n\tlet loadRootCID;\r\n\r\n\tlet joseCryptor;\r\n\tlet setJoseCryptor;\r\n\tlet decryptFromTagNode;\r\n\r\n\tlet setAccess, checkAccess;\r\n\r\n\tlet getTagNodes;\r\n\r\n\tlet refreshedRootCID;\r\n\r\n\t//  onSubmitted gets bound to, and overwritten by active component\r\n\texport let onSubmitted = () => {}; // optional callback by child component to run after tx submitted\r\n\r\n\tonMount(async () => {\r\n\t\tconst { ImmortalDB } = await import('immortal-db');\r\n\r\n\t\tconst { DagJoseCryptor } = await import('./dagjosecryptor');\r\n\r\n\t\t// parse and use cached root CIDs, if saved\r\n\t\tloadRootCID = async () => {\r\n\t\t\tawait ipfsNode;\r\n\t\t\tif (rootCID) return true;\r\n\t\t\tlet res = await ImmortalDB.get(ROOT_CID);\r\n\r\n\t\t\tif (!res) {\r\n\t\t\t\trootCID = false;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\trootCID = CID.asCID(res) || CID.parse(res);\r\n\t\t\tconsole.log('rootCID set in loadRootCID');\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tawait loadRootCID();\r\n\r\n\t\t// use the portal proxcryptor to encrypt the DAG JOSEs\r\n\t\tsetJoseCryptor = async () => {\r\n\t\t\tconsole.log('Setting setJoseCryptor');\r\n\t\t\tawait ipfsNode;\r\n\t\t\tjoseCryptor = new DagJoseCryptor(ipfsNode, proxcryptor, rootCID); //refesh when updated\r\n\t\t\tif (!rootCID) loaded = true;\r\n\t\t};\r\n\r\n\t\thandleRootCIDUpdate = async () => {\r\n\t\t\trootCID = joseCryptor.rootCID;\r\n\t\t\tconsole.log('Updating rootCID', { rootCID: rootCID.toString() });\r\n\t\t\tImmortalDB.set(ROOT_CID, rootCID.toString());\r\n\t\t\tloaded = true;\r\n\t\t};\r\n\t});\r\n\r\n\t// set the cryptor once the proxcryptor is connected and available\r\n\t$: if (proxcryptor && setJoseCryptor) setJoseCryptor();\r\n\r\n\t// update the rootCID as req'd\r\n\t$: if (joseCryptor && joseCryptor.rootCID && handleRootCIDUpdate) handleRootCIDUpdate();\r\n\r\n\tlet decrypt = async (data) => await joseCryptor.selfDecrypt(data);\r\n\r\n\tconst handleSubmit = async function (event) {\r\n\t\tlet tag = event.detail.tag || null;\r\n\t\tlet schema = event.detail.data.schema || '';\r\n\t\tlet value = event.detail.data.value || null;\r\n\r\n\t\tif (!tag || !value) return; // TODO: Handle missing vals better\r\n\r\n\t\t// console.log('Put: ', { tag, value });\r\n\r\n\t\tawait joseCryptor.put(value, tag, schema);\r\n\t\tjoseCryptor = joseCryptor; // refresh UI?\r\n\r\n\t\tonSubmitted(); // update selected component\r\n\t\trefreshedRootCID();\r\n\t};\r\n\r\n\t// save access function to a svelte store so it can be used by any component, any time\r\n\t// allows access to tag by someone's PublicKey\r\n\tsetAccess = async (tag: string, targetPublicKey: Uint8Array) => {\r\n\t\t// allow access to this tag by this public key\r\n\t\tawait joseCryptor.setTagReKeys(tag, targetPublicKey);\r\n\t\tjoseCryptor = joseCryptor; // triggers this.rootCID to fire\r\n\t};\r\n\r\n\tcheckAccess = async (tag: string, targetPublicKey: Uint8Array) => {\r\n\t\t// pass in someone's pubkey to see if they've got access to this tag data\r\n\t\treturn await joseCryptor.checkAccess(tag, targetPublicKey);\r\n\t};\r\n\r\n\tdecryptFromTagNode = async (tagNode) => {\r\n\t\treturn await joseCryptor.decryptFromTagNode(tagNode);\r\n\t};\r\n\r\n\tgetTagNodes = async () => {\r\n\t\tif (!ipfsNode || !rootCID) return;\r\n\r\n\t\tconst root = await ipfsNode.dag.get(rootCID);\r\n\t\tconst promises = Object.entries(root.value).map(async ([key, val]) => {\r\n\t\t\tif (key === 'prev' || !val) return null;\r\n\t\t\tlet fields = await ipfsNode.dag.get(val);\r\n\t\t\treturn fields.value; // https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/DAG.md#ipfsdaggetcid-options\r\n\t\t});\r\n\r\n\t\tconst result = await Promise.all(promises);\r\n\t\treturn result.filter((r) => r); // filter out null values\r\n\t};\r\n\r\n\tasync function getTagNode(tag, root = rootCID) {\r\n\t\tif (!root || !ipfsNode || !tag) return;\r\n\r\n\t\ttry {\r\n\t\t\tconst cid = (await ipfsNode.dag.get(root, { path: `/${tag}`, localResolve: true })).value;\r\n\t\t\tlet tagNode = (await ipfsNode.dag.get(cid, { localResolve: true })).value;\r\n\t\t\treturn tagNode;\r\n\t\t} catch (error) {\r\n\t\t\t// tag may not exist yet, or maybe the user is typing\r\n\t\t\tconsole.warn(`${tag} no DAG data`);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:head>\r\n\t<script>\r\n\t\tglobal = globalThis; // for solana web3 repo\r\n\t</script>\r\n</svelte:head>\r\n\r\n<div class=\"main\">\r\n\t{#if proxcryptor && loaded}\r\n\t\t<div class=\"\">\r\n\t\t\t<ShowRoot {rootCID} />\r\n\r\n\t\t\t<!-- <Basic on:handleSubmit={handleSubmit} {getTagNode} {decrypt} /> -->\r\n\t\t\t<!-- <Contacts\r\n\t\t\t\ton:handleSubmit={handleSubmit}\r\n\t\t\t\t{getTagNode}\r\n\t\t\t\t{decrypt}\r\n\t\t\t\t{rootCID}\r\n\t\t\t\t{hypnsNode}\r\n\t\t\t\t{checkAccess}\r\n\t\t\t\t{setAccess}\r\n\t\t\t\tbind:onSubmitted\r\n\t\t\t\t{getTagNodes}\r\n\t\t\t/> -->\r\n\r\n\t\t\t<Common\r\n\t\t\t\t{getTagNode}\r\n\t\t\t\t{decrypt}\r\n\t\t\t\t{tag}\r\n\t\t\t\t{rootCID}\r\n\t\t\t\t{setAccess}\r\n\t\t\t\tlet:decryptedData\r\n\t\t\t\tbind:refreshedRootCID\r\n\t\t\t>\r\n\t\t\t\t<slot\r\n\t\t\t\t\t{handleSubmit}\r\n\t\t\t\t\t{decryptedData}\r\n\t\t\t\t\t{getTagNodes}\r\n\t\t\t\t\t{checkAccess}\r\n\t\t\t\t\t{setAccess}\r\n\t\t\t\t\t{decryptFromTagNode}\r\n\t\t\t\t/>\r\n\t\t\t</Common>\r\n\t\t</div>\r\n\t{:else}\r\n\t\tConnect with the Wallet to save encrypted messages.\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.main {\r\n\t\twidth: 80%;\r\n\t\tmax-width: var(--column-width);\r\n\t\tmargin: var(--column-margin-top);\r\n\t\tpadding: var(--column-margin-top);\r\n\t\tline-height: 1;\r\n\t\tbackground-color: #e0ede0;\r\n\t}\r\n</style>\r\n","<script>\r\n  import { fade } from \"svelte/transition\";\r\n  import QRCode from \"qrcode\";\r\n  export let value;\r\n\r\n  let canvas;\r\n  let visible = false;\r\n\r\n  async function showQR() {\r\n    QRCode.toCanvas(canvas, value); // Draws qr code symbol to canvas.\r\n    visible = true;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  canvas {\r\n    position: absolute;\r\n    border: 1px solid black;\r\n    z-index: 1;\r\n  }\r\n  span {\r\n    display: inline-block;\r\n  }\r\n</style>\r\n\r\n<span\r\n  on:mouseover={() => {\r\n    showQR();\r\n  }}>\r\n  [QR Code]\r\n</span>\r\n<br />\r\n\r\n<canvas\r\n  hidden={!visible}\r\n  transition:fade\r\n  on:mousemove={() => {\r\n    visible = false;\r\n  }}\r\n  bind:this={canvas}\r\n  width={32}\r\n  height={32} />\r\n<br />\r\n","<script lang=\"ts\">\r\n\timport { onMount } from 'svelte';\r\n\r\n\timport QRCode from '../lib/QRCode.svelte';\r\n\r\n\timport { bufftoHex } from './utils/index';\r\n\r\n\texport let rootCID;\r\n\texport let wallet; // use the same wallet object that the proxcryptor is using, for convenience\r\n\texport let hypnsNode;\r\n\r\n\tlet HyPNSComponent, latestHypns;\r\n\tlet hypnsInstance, instanceReady, publish;\r\n\r\n\tlet publicKeyHex;\r\n\r\n\tlet opts = {\r\n\t\tpersist: true,\r\n\t\tswarmOpts: {\r\n\t\t\tannounceLocalAddress: true,\r\n\t\t\twsProxy: [\r\n\t\t\t\t// 'ws:localhost:3001/proxy', // try localhost first, checking for local hypns-super-peer\r\n\t\t\t\t// 'wss://hypns-super-peer.douganderson444.repl.co/proxy',\r\n\t\t\t\t// \"wss://super.peerpiper.io:49777\",\r\n\t\t\t\t'wss://hyperswarm.mauve.moe',\r\n\t\t\t\t'wss://geut-webrtc-signal-v3.glitch.me',\r\n\t\t\t\t'wss://geut-webrtc-signal-v3.herokuapp.com'\r\n\t\t\t]\r\n\t\t}\r\n\t};\r\n\r\n\tonMount(async () => {\r\n\t\t// wake up REPL\r\n\t\t// try {\r\n\t\t// \tfetch('https://hypns-super-peer.douganderson444.repl.co', {\r\n\t\t// \t\tmethod: 'POST'\r\n\t\t// \t}).then((response) => console.log('2 ', response));\r\n\t\t// } catch (error) {}\r\n\r\n\t\timport('hypns-svelte-component').then((module) => {\r\n\t\t\tHyPNSComponent = module.default;\r\n\t\t});\r\n\t});\r\n\r\n\t$: wallet && hypnsNode && initHypns();\r\n\r\n\tasync function initHypns() {\r\n\t\t// open a HyPNS feed using the hex encoding of this users Ed25519 key\r\n\t\tconst pk: Uint8Array = await wallet.proxcryptor.getPublicKey();\r\n\t\t// convert to hex for hypercore-protocol\r\n\t\tpublicKeyHex = bufftoHex(pk);\r\n\t}\r\n\r\n\tasync function handleOpen() {\r\n\t\t// take the wallet and pass it into hypns\r\n\t\thypnsInstance = await hypnsNode.open({ keypair: { publicKey: publicKeyHex }, wallet });\r\n\t\tinstanceReady = await hypnsInstance.ready();\r\n\r\n\t\tconsole.log({ instanceReady });\r\n\r\n\t\tpublish = () => {\r\n\t\t\thypnsInstance.publish({ ipld: rootCID.toV1().toString() });\r\n\t\t};\r\n\r\n\t\t// should update you whenever the other guy publishes an updated value\r\n\t\thypnsInstance.on('update', (val) => {\r\n\t\t\tlatestHypns = val.ipld;\r\n\t\t});\r\n\t}\r\n\r\n\tasync function handlePublish() {\r\n\t\tpublish();\r\n\t}\r\n</script>\r\n\r\n{#if HyPNSComponent}\r\n\t<svelte:component this={HyPNSComponent} bind:hypnsNode {opts} />\r\n\t<div class=\"main\">\r\n\t\t{#if !hypnsNode}\r\n\t\t\tLoading Hypns...\r\n\t\t{:else}\r\n\t\t\t{latestHypns ? 'Last Saved Root: ' + latestHypns : 'Connect to Pin to PiperNet'}\r\n\t\t\t{#if !hypnsInstance}\r\n\t\t\t\t<button on:click={handleOpen}>Pin to PiperNet</button>\r\n\t\t\t{:else if instanceReady}\r\n\t\t\t\t{#await instanceReady}\r\n\t\t\t\t\tLoading instance...\r\n\t\t\t\t{:then}\r\n\t\t\t\t\t<h3>✔️ Connected to PiperNet</h3>\r\n\t\t\t\t\t{#if latestHypns === rootCID.toV1().toString()}\r\n\t\t\t\t\t\t<h3>✔️ PiperNet up to date</h3>\r\n\t\t\t\t\t{:else}\r\n\t\t\t\t\t\t<h3>⚠️ PiperNet needs updating</h3>\r\n\t\t\t\t\t\t<button on:click={handlePublish} disabled={!rootCID || !publish}>Publish Latest</button>\r\n\t\t\t\t\t{/if}\r\n\r\n\t\t\t\t\t<!-- <smaller>hypns://{publicKeyHex?.toUpperCase()}</smaller><br /> -->\r\n\t\t\t\t\tConnect with others: [<a href=\"{location.origin + location.pathname}?add={publicKeyHex}\"\r\n\t\t\t\t\t\t>Link</a\r\n\t\t\t\t\t>] <QRCode value={`${location.origin + location.pathname}?add=${publicKeyHex}`} />\r\n\t\t\t\t{/await}\r\n\t\t\t{:else}\r\n\t\t\t\tSign message to write to PiperNet...\r\n\t\t\t{/if}\r\n\t\t{/if}\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\t.main {\r\n\t\twidth: 80%;\r\n\t\tmax-width: var(--column-width);\r\n\t\tmargin: var(--column-margin-top);\r\n\t\tline-height: 1;\r\n\t}\r\n\r\n\tdiv.main {\r\n\t\tborder: 1px solid rgb(196, 196, 196);\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: lightgreen;\r\n\t\tpadding: 1.62em;\r\n\t\toverflow-wrap: break-word;\r\n\t\tword-break: break-word;\r\n\t}\r\n\r\n\tbutton {\r\n\t\tmargin: 1.62em;\r\n\t\tpadding: 1.62em;\r\n\t\tbackground-color: green;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\texport let decryptFromTagNode;\r\n\texport let tagNode;\r\n\r\n\tlet data;\r\n\tlet checked;\r\n\r\n\t$: if (tagNode) getData();\r\n\r\n\tasync function getData() {\r\n\t\tconsole.log(`Decrypting data on ${tagNode.tag} `);\r\n\t\tdata = await decryptFromTagNode(tagNode);\r\n\t\tchecked = true;\r\n\t}\r\n\r\n\tonMount(async () => {});\r\n</script>\r\n\r\n<div>\r\n\t{#if data}\r\n\t\t{#await data}\r\n\t\t\taccessing tagNode...\r\n\t\t{:then data}\r\n\t\t\t{data}\r\n\t\t{/await}\r\n\t{:else}\r\n\t\t✖️ You have no access to {tagNode.tag}\r\n\t{/if}\r\n</div>\r\n","<script>\r\n\t// Basic template to show how to add Contact with the proxcryptor Parent component\r\n\timport { page } from '$app/stores';\r\n\r\n\timport { onMount, tick, createEventDispatcher } from 'svelte';\r\n\r\n\timport { slide } from 'svelte/transition';\r\n\timport { quintOut } from 'svelte/easing';\r\n\r\n\timport Search from './Search.svelte';\r\n\r\n\timport { validatePubKey } from '$lib/utils/index';\r\n\r\n\timport ContactCard from './ContactCard.svelte';\r\n\timport PiperNet from '../Hypns/PiperNet.svelte';\r\n\timport GetTags from './GetTags.svelte';\r\n\timport TagAccess from '$lib/TagAccess.svelte';\r\n\r\n\timport { contacts } from '$lib/stores';\r\n\timport TagValue from '$lib/TagValue.svelte';\r\n\r\n\t// Component props passed in from Parent Component\r\n\t// will also reactively update if updated in parent\r\n\texport let getTagNodes;\r\n\texport let hypnsNode;\r\n\texport let checkAccess;\r\n\texport let decryptedData;\r\n\texport let decryptFromTagNode;\r\n\r\n\t$: if (decryptedData) $contacts = decryptedData;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tconst tag = 'Contacts';\r\n\r\n\tlet schema;\r\n\tlet handle, pubKey, pubKeyInput;\r\n\tlet tagNode;\r\n\tlet valid;\r\n\tlet submitting;\r\n\tlet mounted;\r\n\r\n\tonMount(async () => {\r\n\t\t// check if this is a search params loaded page\r\n\t\tconsole.log({ pageUrl: $page.url });\r\n\r\n\t\tlet params = new URLSearchParams(location.search);\r\n\r\n\t\tconsole.log({ params: params.get('add') });\r\n\r\n\t\tif ($page.url.searchParams.has('add')) {\r\n\t\t\tpubKey = $page.url.searchParams.get('add');\r\n\t\t\tawait tick();\r\n\t\t\tpubKeyInput.focus();\r\n\t\t} else if (params.has('add')) {\r\n\t\t\tpubKey = params.get('add');\r\n\t\t\tawait tick();\r\n\t\t\tpubKeyInput.focus();\r\n\t\t}\r\n\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\texport function onSubmitted() {\r\n\t\tsubmitting = false;\r\n\t\thandle = '';\r\n\t\tpubKey = '';\r\n\t\tvalid = false;\r\n\t}\r\n\r\n\tfunction handleValidate() {\r\n\t\tconsole.log(`Validating ${pubKey}`);\r\n\r\n\t\tif (!pubKey) return; // TODO: Handle better\r\n\t\t// <!-- defined by schema -->\r\n\t\tif (validatePubKey(pubKey)) valid = true;\r\n\t\telse valid = false;\r\n\t}\r\n\r\n\tasync function handleAddContact() {\r\n\t\tconsole.log('Adding ', { handle }, { pubKey });\r\n\t\tif (!handle || !pubKey) return; // TODO: Handle better\r\n\t\t// <!-- defined by schema -->\r\n\t\tconst bytes = validatePubKey(pubKey);\r\n\t\tconsole.log('Adding bytes', { bytes });\r\n\t\tconst value = [...decryptedData, { handle, pubKey: new Uint8Array(bytes) }];\r\n\t\tconsole.log('Adding value', { value });\r\n\t\tsubmitting = true;\r\n\t\tdispatch('handleSubmit', { tag, data: { value, schema } });\r\n\t}\r\n</script>\r\n\r\n<div transition:slide={{ delay: 100, duration: 400, easing: quintOut }}>\r\n\t<div class=\"data-entry\">\r\n\t\t<h1 class=\"tag\">{tag}</h1>\r\n\t\t<div class=\"tag keywords\">\r\n\t\t\t<input bind:value={schema} placeholder=\"publicKey friends contacts\" disabled />\r\n\t\t</div>\r\n\r\n\t\t<div class=\"item\">\r\n\t\t\t<!-- placeholder={'Paste their Public Key'} -->\r\n\t\t\t<input\r\n\t\t\t\tbind:this={pubKeyInput}\r\n\t\t\t\tbind:value={pubKey}\r\n\t\t\t\ton:input={handleValidate}\r\n\t\t\t\ton:change={handleValidate}\r\n\t\t\t\ton:focus={handleValidate}\r\n\t\t\t/>{valid ? '✔️ Valid Public Key' : ''}\r\n\t\t\t<!-- <Search bind:handle bind:pubKey /> -->\r\n\t\t</div>\r\n\t\t{#if valid}\r\n\t\t\t<h1>Add Nickname</h1>\r\n\t\t\t<label for=\"handle\"> Handle: </label>\r\n\t\t\t<input bind:value={handle} id=\"handle\" />\r\n\t\t{/if}\r\n\t\t<div class=\"submit\">\r\n\t\t\t<label for=\"preview\">\r\n\t\t\t\t<!-- <input type=\"checkbox\" bind:checked={preview} /> Preview Final -->\r\n\t\t\t</label>\r\n\t\t\t<!-- <button on:click|preventDefault={mde.externalUpdate}>Clear</button> -->\r\n\t\t\t<button on:click|preventDefault={handleAddContact} disabled={!handle || !pubKey || submitting}\r\n\t\t\t\t>Save</button\r\n\t\t\t>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n{#if decryptedData}\r\n\t<!-- defined by schema -->\r\n\t{#each decryptedData as { handle, pubKey }}\r\n\t\t<div class=\"card-container\">\r\n\t\t\t<ContactCard>\r\n\t\t\t\t<span slot=\"handle\">\r\n\t\t\t\t\t{handle}\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<span slot=\"publicKey\">\r\n\t\t\t\t\tPubKey: <small>{pubKey}</small>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<span slot=\"latest\">\r\n\t\t\t\t\t<PiperNet {pubKey} {hypnsNode} let:latestHypns>\r\n\t\t\t\t\t\t<!-- once root CID appears, get tag details then show tag access -->\r\n\t\t\t\t\t\t<GetTags rootCID={latestHypns} {getTagNodes} let:tagNode>\r\n\t\t\t\t\t\t\t{#if tag}\r\n\t\t\t\t\t\t\t\t<TagAccess tag={tagNode.tag} {pubKey} {checkAccess} />\r\n\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t\t{#if tagNode.tag === 'Profile'}\r\n\t\t\t\t\t\t\t\t<TagValue {tagNode} {decryptFromTagNode} />\r\n\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t</GetTags>\r\n\t\t\t\t\t</PiperNet>\r\n\t\t\t\t</span>\r\n\t\t\t</ContactCard>\r\n\t\t</div>\r\n\t{/each}\r\n{/if}\r\n\r\n<style>\r\n\t.card-container {\r\n\t\tmargin: 1em 0;\r\n\t}\r\n\t.data-entry {\r\n\t\tdisplay: flex;\r\n\t\tpadding: 0.5em;\r\n\t\tflex-direction: column;\r\n\t\tmargin: 1.62em;\r\n\t}\r\n\t.item {\r\n\t\tflex: 1;\r\n\t\tmargin: 0.5em 0;\r\n\t\tpadding: 0.5em 0;\r\n\t}\r\n\tinput {\r\n\t\tpadding: 1.62em;\r\n\t\tmargin: 1.62em 0;\r\n\t\twidth: 100%;\r\n\t}\r\n</style>\r\n","import Contacts from '$lib/templates/Contacts/Contacts.svelte';\r\nimport Profile from '$lib/templates/Basic/Profile.svelte';\r\n\r\nconst CONTACTS = 'Contacts';\r\nconst PROFILE = 'Profile';\r\n\r\nexport const Components = {\r\n\t[CONTACTS]: { name: CONTACTS, component: Contacts, tag: CONTACTS },\r\n\t[PROFILE]: { name: PROFILE, component: Profile, tag: PROFILE }\r\n};\r\n","<script lang=\"ts\">\n\timport { onMount, setContext } from 'svelte';\n\n\timport DagJose from './DAGJose.svelte';\n\timport HypnsManager from './HypnsManager.svelte';\n\n\timport { Components } from '$lib/components/index';\n\n\texport let wallet = null;\n\texport let rootCID = null;\n\n\tlet active = Components['Contacts']; // needs to open on contacts so that they are loaded into the svelte store $contacts\n\n\tlet inputUrl = 'https://peerpiper.github.io/iframe-wallet-engine/'; // = 'https://wallet.peerpiper.io/'; // can be changed by any user\n\n\tlet ipfsNode, CID;\n\tlet nodeId;\n\n\tlet hypnsNode;\n\n\tlet Web3WalletMenu;\n\n\tlet start = Date.now();\n\n\tlet onSubmitted; // only here to pass from svelte:component to DAGJose component\n\n\tonMount(async () => {\n\t\t// load asyncs in parallel\n\t\tif (!wallet) loadWallet();\n\t\tif (!ipfsNode) loadIPFS();\n\n\t\tasync function loadWallet() {\n\t\t\t// @ts-ignore\n\t\t\t({ Web3WalletMenu } = await import('@peerpiper/svelte-web3-wallet-connector'));\n\t\t}\n\n\t\tasync function loadIPFS() {\n\t\t\t// setup IPFS\n\t\t\tconst IPFSmodule = await import('../modules/ipfs-core-0.14.0/ipfs-core.js');\n\t\t\tconst IPFS = IPFSmodule.default;\n\n\t\t\tCID = IPFS.CID;\n\n\t\t\tipfsNode = await IPFS.create({\n\t\t\t\t// repo: 'dag-jose-proxcryptor'\n\t\t\t});\n\n\t\t\tconsole.log(`Loaded in ${(Date.now() - start) / 1000}s`, { ipfsNode });\n\n\t\t\tconst identity = await ipfsNode.id();\n\t\t\tnodeId = identity.id;\n\t\t\tconsole.info('NodeId', nodeId);\n\t\t}\n\n\t\treturn () => ipfsNode.stop();\n\t});\n</script>\n\n<div class=\"\">\n\t<!-- First, you need a wallet -->\n\t{#if Web3WalletMenu}\n\t\t<svelte:component this={Web3WalletMenu} bind:wallet {inputUrl} />\n\t{:else}\n\t\tLoading Web3 Wallet...<br />\n\t{/if}\n\n\t<div>\n\t\t<select bind:value={active} class=\"form-control\">\n\t\t\t{#each Object.entries(Components) as [key, value]}\n\t\t\t\t<option {value}>{key}</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\n\t<!-- Then you need a way to encrypt/decrypt the data to IPLD  -->\n\t{#if wallet && wallet.proxcryptor && ipfsNode && CID}\n\t\t<DagJose\n\t\t\tproxcryptor={wallet.proxcryptor}\n\t\t\t{ipfsNode}\n\t\t\t{CID}\n\t\t\tbind:rootCID\n\t\t\ttag={active.tag}\n\t\t\t{onSubmitted}\n\t\t\tlet:decryptedData\n\t\t\tlet:getTagNodes\n\t\t\tlet:checkAccess\n\t\t\tlet:setAccess\n\t\t\tlet:handleSubmit\n\t\t\tlet:decryptFromTagNode\n\t\t>\n\t\t\t<svelte:component\n\t\t\t\tthis={active.component}\n\t\t\t\ton:handleSubmit={handleSubmit}\n\t\t\t\tbind:onSubmitted\n\t\t\t\t{decryptedData}\n\t\t\t\t{getTagNodes}\n\t\t\t\t{checkAccess}\n\t\t\t\t{setAccess}\n\t\t\t\t{hypnsNode}\n\t\t\t\t{decryptFromTagNode}\n\t\t\t/>\n\t\t</DagJose>\n\t{:else}\n\t\tLoading IPFS...<br />\n\t{/if}\n\n\t<!-- When there is data saved to ILPD, why not save it to PipeNet?  -->\n\t{#if rootCID}\n\t\t<HypnsManager {wallet} {rootCID} bind:hypnsNode />\n\t{:else}\n\t\t<!-- No Data saved yet. -->\n\t{/if}\n</div>\n\n<style>\n\t.main {\n\t\twidth: 80%;\n\t\tmax-width: var(--column-width);\n\t\tmargin: var(--column-margin-top);\n\t\tline-height: 1;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\n\timport App from '$lib/App.svelte';\n\n\tonMount(async () => {});\n</script>\n\n<svelte:head>\n\t<script>\n\t\tglobal = globalThis; // for solana web3 repo\n\t</script>\n</svelte:head>\n\n<App />\n\n<style>\n</style>\n"],"names":["tag","b64","QRCode"],"mappings":"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"}